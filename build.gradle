// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
//  ext.kotlin_version = '1.3.20'
    ext.kotlin_version = '1.3.41'
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
//    classpath 'com.android.tools.build:gradle:2.3.3'
//    classpath 'com.android.tools.build:gradle:3.3.2'
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath 'com.novoda:bintray-release:0.9.1'
//    classpath 'com.novoda:bintray-release:0.9'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        //        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        //        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url getRepositoryDir() }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Javadoc) {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    versionCode = 385
    versionName = '3.8.5'
    userOrg = 'arialyy'
    groupId = 'com.arialyy.aria'
    publishVersion = versionName
//  publishVersion = '1.0.4'  //FTP插件
    repoName = 'maven'
//  repoName='aria'
    desc = 'android 下载框架'
    website = 'https://github.com/AriaLyy/Aria'
    licences = ['Apache-2.0']

    compileSdkVersion = 28
    supportLibVersion = "27.1.1"
    buildToolsVersion = "28.0.3"
    targetSdkVersion = 28
    lifecycleVersion = "1.1.1"
    minSdkVersion = 15

    // 以下是androidX
    XAppcompatVersion = "1.1.0"
}


// get android sdk dir
String getRepositoryDir() {
    def rootDir = project.rootDir
    def androidSdkDir = null
    String envVar = System.getenv("ANDROID_HOME")
    def localProperties = new File(rootDir, 'local.properties')
    String systemProperty = System.getProperty("android.home")
    if (envVar != null) {
        androidSdkDir = envVar
    } else if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDirProp = properties.getProperty('sdk.dir')
        if (sdkDirProp != null) {
            androidSdkDir = sdkDirProp
        } else {
            sdkDirProp = properties.getProperty('android.dir')
            if (sdkDirProp != null) {
                androidSdkDir = (new File(rootDir, sdkDirProp)).getAbsolutePath()
            }
        }
    }
    if (androidSdkDir == null && systemProperty != null) {
        androidSdkDir = systemProperty
    }
    if (androidSdkDir == null) {
        println("don't have env: android_home ,please set...")
        if (androidSdkDir == null) {
            throw new RuntimeException(
                    "Unable to determine Android SDK directory.")
        }
    }

    def deployPath = file(androidSdkDir + "/extras/android/m2repository/")
    String repository_url = "file://${deployPath.absolutePath}"
    repository_url
}